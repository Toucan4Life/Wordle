@page "/"
@using global::Wordle
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Net.Http
@using global::Wordle.BLL
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
<PageTitle>Wordle</PageTitle>

<h1>Wordle</h1>

<EditForm Model="@Start" OnSubmit="@Submit" FormName="WordleStartParameter">
    <label for="WordLength">WordLength</label>
    <InputNumber @bind-Value="Start!.WordLength" class="form-control" id="WordLength" />
    <label for="FirstChar">FirstChar (Optional)</label>
    <InputText @bind-Value="Start!.FirstChar" class="form-control" id="FirstChar" />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>
<EditForm Model="@Step" OnSubmit="@SubmitStep" FormName="WordleStepParameter">
    <label for="Word">Word</label>
    <InputText disabled="@Started" @bind-Value="Step!.Word" class="form-control" id="Word" />
    <label for="Pattern">Pattern (0 => Incorrect / 1 => Misplaced / 2 => Correct)</label>
    <InputText disabled="@Started" @bind-Value="Step!.Pattern" class="form-control" id="Pattern"/>
    <button disabled="@Started" class="btn btn-primary" type="submit">Submit Step</button>
</EditForm>

@if (_recommendedWords != null)
{
    <h3>Recommended next word</h3>
    <div class="grid">
        <QuickGrid Items="@_recommendedWords">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Frequency)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Entropy)" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
        </QuickGrid>
    </div>
}
@if (_possibleWords != null)
{
    <h3>Possible words</h3>
    <div>
        <span>Words count :  @(_possibleWords.Count()) </span>
        <span>Total Entropy : @(WordSolver.CalculateUniformEntropy(_possibleWords.Count())) </span>

        <div class="grid">
            <QuickGrid Items="@_possibleWords">
                <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                <PropertyColumn Property="@(p => p.Frequency)" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
                <PropertyColumn Property="@(p => p.Entropy)" Sortable="true"  />
            </QuickGrid>
        </div>
    </div>
}

@code {

    [SupplyParameterFromForm]
    public WordleStartParameter? Start { get; set; }
    [SupplyParameterFromForm]
    public WordleStepParameter? Step { get; set; }
    private IQueryable<WordleEntity> _possibleWords;
    private IQueryable<WordleEntity> _recommendedWords;
    public static bool Started = true;
    public static WordleSolver WordSolver { get; set; }

    protected override void OnInitialized()
    {
        Start ??= new WordleStartParameter { WordLength = 5 };
        Step ??= new WordleStepParameter();
    }

    private void Submit()
    {
        Started = false;
        WordSolver = new WordleSolver(Start);
        var wordleEntities = WordSolver.RetrieveRecommendedWords(new List<Tuple<string, string>>()).ToList();
        _recommendedWords = wordleEntities.OrderByDescending(t=>t.Entropy).Take(5).AsQueryable();
        _possibleWords = wordleEntities.Where(w=>w.IsCandidate).AsQueryable();
    }

    private void SubmitStep()
    {
        var wordleEntities = WordSolver.RetrieveRecommendedWords(new List
            <Tuple<string, string>> { new Tuple<string, string>(Step.Word, Step.Pattern) });
        _recommendedWords = wordleEntities.OrderByDescending(t => t.Entropy).Take(5).AsQueryable();
        _possibleWords = wordleEntities.Where(w => w.IsCandidate).AsQueryable();
    }
}
